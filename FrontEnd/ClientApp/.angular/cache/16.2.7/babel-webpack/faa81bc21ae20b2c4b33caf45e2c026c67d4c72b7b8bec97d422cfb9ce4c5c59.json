{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction JobComponent_p_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Loading Job...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction JobComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const evidence_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(evidence_r3.name);\n  }\n}\nfunction JobComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function JobComponent_button_7_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const transition_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.doTransition(transition_r4));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const transition_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(transition_r4.name);\n  }\n}\nexport class JobComponent {\n  constructor(http, apiUrl, router, route) {\n    this.router = router;\n    this.route = route;\n    this.jobStepIndex = 0;\n    var flowId = this.route.snapshot.paramMap.get('flowId');\n    http.get(apiUrl + `job/${flowId}`).subscribe(result => {\n      this.job = result;\n    });\n  }\n  updateEvidence(evidence, value) {\n    console.log(evidence, value);\n    evidence.value = value;\n  }\n  doTransition(transition) {\n    console.log(transition);\n    if (!transition.isEnd) {\n      this.jobStepIndex++;\n      console.log(this.jobStepIndex);\n    } else {\n      this.router.navigate(['/flows']);\n    }\n  }\n  static #_ = this.ɵfac = function JobComponent_Factory(t) {\n    return new (t || JobComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('API_URL'), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: JobComponent,\n    selectors: [[\"app-job\"]],\n    decls: 8,\n    vars: 5,\n    consts: [[4, \"ngIf\"], [1, \"step\"], [4, \"ngFor\", \"ngForFor\"], [\"class\", \"btn btn-primary\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-primary\", 3, \"click\"]],\n    template: function JobComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, JobComponent_p_0_Template, 2, 0, \"p\", 0);\n        i0.ɵɵelementStart(1, \"h1\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\");\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, JobComponent_div_6_Template, 3, 1, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(7, JobComponent_button_7_Template, 2, 1, \"button\", 3);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !(ctx.job == null ? null : ctx.job.id));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.job.flow.name, \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.job.jobSteps[ctx.jobStepIndex].step.name);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForFor\", ctx.job.jobSteps[ctx.jobStepIndex].evidence);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.job.jobSteps[ctx.jobStepIndex].transitions);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf],\n    styles: [\".step[_ngcontent-%COMP%] {\\r\\n  border: 1px solid black;\\r\\n  border-radius: 4px;\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n.evidence[_ngcontent-%COMP%] {\\r\\n  border: 1px solid black;\\r\\n  border-radius: 4px;\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n\\r\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvam9iL2pvYi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsdUJBQXVCO0VBQ3ZCLGtCQUFrQjtFQUNsQixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsa0JBQWtCO0VBQ2xCLFlBQVk7QUFDZCIsInNvdXJjZXNDb250ZW50IjpbIi5zdGVwIHtcclxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcclxuICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgcGFkZGluZzogNXB4O1xyXG59XHJcblxyXG4uZXZpZGVuY2Uge1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xyXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICBwYWRkaW5nOiA1cHg7XHJcbn1cclxuXHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","evidence_r3","name","ɵɵlistener","JobComponent_button_7_Template_button_click_0_listener","restoredCtx","ɵɵrestoreView","_r6","transition_r4","$implicit","ctx_r5","ɵɵnextContext","ɵɵresetView","doTransition","JobComponent","constructor","http","apiUrl","router","route","jobStepIndex","flowId","snapshot","paramMap","get","subscribe","result","job","updateEvidence","evidence","value","console","log","transition","isEnd","navigate","_","ɵɵdirectiveInject","i1","HttpClient","i2","Router","ActivatedRoute","_2","selectors","decls","vars","consts","template","JobComponent_Template","rf","ctx","ɵɵtemplate","JobComponent_p_0_Template","JobComponent_div_6_Template","JobComponent_button_7_Template","ɵɵproperty","id","ɵɵtextInterpolate1","flow","jobSteps","step","transitions"],"sources":["C:\\dev\\sudosky\\Centricity\\FrontEnd\\ClientApp\\src\\app\\job\\job.component.ts","C:\\dev\\sudosky\\Centricity\\FrontEnd\\ClientApp\\src\\app\\job\\job.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { empty } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-job',\r\n  templateUrl: './job.component.html',\r\n  styleUrls: ['./job.component.css']\r\n})\r\nexport class JobComponent {\r\n\r\n  public job: any;\r\n  public jobStepIndex: number = 0;\r\n\r\n  constructor(http: HttpClient, @Inject('API_URL') apiUrl: string, private router: Router, private route: ActivatedRoute) {\r\n    \r\n    var flowId = this.route.snapshot.paramMap.get('flowId');\r\n\r\n    http.get(apiUrl + `job/${flowId}`).subscribe(result => {\r\n      this.job = result;      \r\n    })  \r\n  }\r\n\r\n  public updateEvidence(evidence: any, value: any) {\r\n    console.log(evidence, value);\r\n    evidence.value = value;\r\n  }\r\n\r\n  public doTransition(transition: any) {\r\n    console.log(transition);\r\n    if (!transition.isEnd) {\r\n      this.jobStepIndex++;\r\n      console.log(this.jobStepIndex);\r\n    }\r\n    else {\r\n      this.router.navigate(['/flows']);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n","<p *ngIf=\"!job?.id\">Loading Job...</p>\r\n\r\n<h1>{{ job.flow.name }} </h1>\r\n\r\n<div class=\"step\">\r\n  <div>{{ job.jobSteps[jobStepIndex].step.name }}</div>\r\n  <div *ngFor=\"let evidence for job.jobSteps[jobStepIndex].evidence\">\r\n    <div>{{ evidence.name }}</div>\r\n    <!--<div *ngIf=\"evidence.evidenceType == 1\">\r\n      <input type=\"text\" (onchange)=\"updateEvidence(evidence, value)\" />\r\n    </div>\r\n    <div *ngIf=\"evidence.evidenceType == 2\">\r\n      <input type=\"checkbox\" (onchange)=\"updateEvidence(evidence, value)\" />\r\n    </div>-->\r\n  </div>\r\n</div>\r\n\r\n<button *ngFor=\"let transition of job.jobSteps[jobStepIndex].transitions\" class=\"btn btn-primary\" (click)=\"doTransition(transition)\">{{ transition.name }}</button>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}