{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction JobComponent_p_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Loading Job...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction JobComponent_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function JobComponent_button_6_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const transition_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.doTransition(transition_r2));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const transition_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(transition_r2.name);\n  }\n}\nexport class JobComponent {\n  constructor(http, apiUrl, router, route) {\n    this.router = router;\n    this.route = route;\n    this.jobStepIndex = 0;\n    var flowId = this.route.snapshot.paramMap.get('flowId');\n    http.get(apiUrl + `job/${flowId}`).subscribe(result => {\n      this.job = result;\n    });\n  }\n  doTransition(transition) {\n    console.log(transition);\n    if (transition.isEnd) {\n      this.jobStepIndex++;\n    }\n  }\n  static #_ = this.ɵfac = function JobComponent_Factory(t) {\n    return new (t || JobComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('API_URL'), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: JobComponent,\n    selectors: [[\"app-job\"]],\n    decls: 7,\n    vars: 4,\n    consts: [[4, \"ngIf\"], [1, \"step\"], [\"class\", \"btn btn-primary\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-primary\", 3, \"click\"]],\n    template: function JobComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, JobComponent_p_0_Template, 2, 0, \"p\", 0);\n        i0.ɵɵelementStart(1, \"h1\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\");\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(6, JobComponent_button_6_Template, 2, 1, \"button\", 2);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !(ctx.job == null ? null : ctx.job.id));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.job.flow.name, \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.job.jobSteps[ctx.jobStepIndex].step.name);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.job.jobSteps[ctx.jobStepIndex].transitions);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf],\n    styles: [\".step[_ngcontent-%COMP%] {\\r\\n  border: 1px solid black;\\r\\n  border-radius: 4px;\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n.evidence[_ngcontent-%COMP%] {\\r\\n  border: 1px solid black;\\r\\n  border-radius: 4px;\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n\\r\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvam9iL2pvYi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsdUJBQXVCO0VBQ3ZCLGtCQUFrQjtFQUNsQixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsa0JBQWtCO0VBQ2xCLFlBQVk7QUFDZCIsInNvdXJjZXNDb250ZW50IjpbIi5zdGVwIHtcclxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcclxuICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgcGFkZGluZzogNXB4O1xyXG59XHJcblxyXG4uZXZpZGVuY2Uge1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xyXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICBwYWRkaW5nOiA1cHg7XHJcbn1cclxuXHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","JobComponent_button_6_Template_button_click_0_listener","restoredCtx","ɵɵrestoreView","_r4","transition_r2","$implicit","ctx_r3","ɵɵnextContext","ɵɵresetView","doTransition","ɵɵadvance","ɵɵtextInterpolate","name","JobComponent","constructor","http","apiUrl","router","route","jobStepIndex","flowId","snapshot","paramMap","get","subscribe","result","job","transition","console","log","isEnd","_","ɵɵdirectiveInject","i1","HttpClient","i2","Router","ActivatedRoute","_2","selectors","decls","vars","consts","template","JobComponent_Template","rf","ctx","ɵɵtemplate","JobComponent_p_0_Template","JobComponent_button_6_Template","ɵɵproperty","id","ɵɵtextInterpolate1","flow","jobSteps","step","transitions"],"sources":["C:\\dev\\sudosky\\Centricity\\FrontEnd\\ClientApp\\src\\app\\job\\job.component.ts","C:\\dev\\sudosky\\Centricity\\FrontEnd\\ClientApp\\src\\app\\job\\job.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { empty } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-job',\r\n  templateUrl: './job.component.html',\r\n  styleUrls: ['./job.component.css']\r\n})\r\nexport class JobComponent {\r\n\r\n  public job: any;\r\n  public jobStepIndex: number = 0;\r\n\r\n  constructor(http: HttpClient, @Inject('API_URL') apiUrl: string, private router: Router, private route: ActivatedRoute) {\r\n\r\n    var flowId = this.route.snapshot.paramMap.get('flowId');\r\n    http.get(apiUrl + `job/${flowId}`).subscribe(result => {\r\n      this.job = result;      \r\n    })  \r\n  }\r\n\r\n  public doTransition(transition: any) {\r\n    console.log(transition);\r\n    if (transition.isEnd) {\r\n      this.jobStepIndex++;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","<p *ngIf=\"!job?.id\">Loading Job...</p>\r\n\r\n<h1>{{ job.flow.name }} </h1>\r\n\r\n<div class=\"step\">\r\n  <div>{{ job.jobSteps[jobStepIndex].step.name }}</div>  \r\n</div>\r\n\r\n<button *ngFor=\"let transition of job.jobSteps[jobStepIndex].transitions\" class=\"btn btn-primary\" (click)=\"doTransition(transition)\">{{ transition.name }}</button>\r\n"],"mappings":";;;;;;ICAAA,EAAA,CAAAC,cAAA,QAAoB;IAAAD,EAAA,CAAAE,MAAA,qBAAc;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;;;IAQtCH,EAAA,CAAAC,cAAA,gBAAqI;IAAnCD,EAAA,CAAAI,UAAA,mBAAAC,uDAAA;MAAA,MAAAC,WAAA,GAAAN,EAAA,CAAAO,aAAA,CAAAC,GAAA;MAAA,MAAAC,aAAA,GAAAH,WAAA,CAAAI,SAAA;MAAA,MAAAC,MAAA,GAAAX,EAAA,CAAAY,aAAA;MAAA,OAASZ,EAAA,CAAAa,WAAA,CAAAF,MAAA,CAAAG,YAAA,CAAAL,aAAA,CAAwB;IAAA,EAAC;IAACT,EAAA,CAAAE,MAAA,GAAqB;IAAAF,EAAA,CAAAG,YAAA,EAAS;;;;IAA9BH,EAAA,CAAAe,SAAA,GAAqB;IAArBf,EAAA,CAAAgB,iBAAA,CAAAP,aAAA,CAAAQ,IAAA,CAAqB;;;ADG1J,OAAM,MAAOC,YAAY;EAKvBC,YAAYC,IAAgB,EAAqBC,MAAc,EAAUC,MAAc,EAAUC,KAAqB;IAA7C,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,KAAK,GAALA,KAAK;IAF/F,KAAAC,YAAY,GAAW,CAAC;IAI7B,IAAIC,MAAM,GAAG,IAAI,CAACF,KAAK,CAACG,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,QAAQ,CAAC;IACvDR,IAAI,CAACQ,GAAG,CAACP,MAAM,GAAG,OAAOI,MAAM,EAAE,CAAC,CAACI,SAAS,CAACC,MAAM,IAAG;MACpD,IAAI,CAACC,GAAG,GAAGD,MAAM;IACnB,CAAC,CAAC;EACJ;EAEOhB,YAAYA,CAACkB,UAAe;IACjCC,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;IACvB,IAAIA,UAAU,CAACG,KAAK,EAAE;MACpB,IAAI,CAACX,YAAY,EAAE;;EAEvB;EAAC,QAAAY,CAAA,G;qBAlBUlB,YAAY,EAAAlB,EAAA,CAAAqC,iBAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAvC,EAAA,CAAAqC,iBAAA,CAKe,SAAS,GAAArC,EAAA,CAAAqC,iBAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAzC,EAAA,CAAAqC,iBAAA,CAAAG,EAAA,CAAAE,cAAA;EAAA;EAAA,QAAAC,EAAA,G;UALpCzB,YAAY;IAAA0B,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCXzBlD,EAAA,CAAAoD,UAAA,IAAAC,yBAAA,eAAsC;QAEtCrD,EAAA,CAAAC,cAAA,SAAI;QAAAD,EAAA,CAAAE,MAAA,GAAoB;QAAAF,EAAA,CAAAG,YAAA,EAAK;QAE7BH,EAAA,CAAAC,cAAA,aAAkB;QACXD,EAAA,CAAAE,MAAA,GAA0C;QAAAF,EAAA,CAAAG,YAAA,EAAM;QAGvDH,EAAA,CAAAoD,UAAA,IAAAE,8BAAA,oBAAmK;;;QAR/JtD,EAAA,CAAAuD,UAAA,WAAAJ,GAAA,CAAApB,GAAA,kBAAAoB,GAAA,CAAApB,GAAA,CAAAyB,EAAA,EAAc;QAEdxD,EAAA,CAAAe,SAAA,GAAoB;QAApBf,EAAA,CAAAyD,kBAAA,KAAAN,GAAA,CAAApB,GAAA,CAAA2B,IAAA,CAAAzC,IAAA,MAAoB;QAGjBjB,EAAA,CAAAe,SAAA,GAA0C;QAA1Cf,EAAA,CAAAgB,iBAAA,CAAAmC,GAAA,CAAApB,GAAA,CAAA4B,QAAA,CAAAR,GAAA,CAAA3B,YAAA,EAAAoC,IAAA,CAAA3C,IAAA,CAA0C;QAGlBjB,EAAA,CAAAe,SAAA,GAAyC;QAAzCf,EAAA,CAAAuD,UAAA,YAAAJ,GAAA,CAAApB,GAAA,CAAA4B,QAAA,CAAAR,GAAA,CAAA3B,YAAA,EAAAqC,WAAA,CAAyC"},"metadata":{},"sourceType":"module","externalDependencies":[]}